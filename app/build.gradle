apply plugin: 'com.android.application'
apply from: './config_buildtypes.gradle'
apply from: './config_product_flavors.gradle'
apply from: 'https://raw.githubusercontent.com/CKS-ROC/Useful_Gradle/master/version.gradle'
def version = this.ext.default_version()
android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"
    defaultConfig {
        applicationId "com.zinc.com.zinc.flavordemo"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode version.versionCode.toInteger()
        versionName version.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    //Ref :  https://stackoverflow.com/questions/31461267/using-a-different-manifestplaceholder-for-each-build-variant
    applicationVariants.all { variant ->
        def flavor = variant.productFlavors[0]
        def full_buildTypename = variant.buildType.name.toString()
        def flavorName = variant.flavorName
        def buildtype = full_buildTypename
        def env = ""
        if (full_buildTypename.contains("_")) {
            buildtype = full_buildTypename.split("_")[0]
            if (full_buildTypename.contains("prod")) {
                env = ""
            } else {
                env = "_" + full_buildTypename.split("_")[0]
            }
        }
        variant.buildConfigField "String", "ENV", "\"${env}\""
        def flavor_version = this.ext.default_version(flavorName)
        println "Show " + flavorName + " current flavor_version versionName " + flavor_version.versionName
        println "Show " + flavorName + " current _version versionCode :   " + flavor_version.versionCode
        variant.buildConfigField "String", "API_HOST_URL", "\"${flavor.ext.API_HOST[buildtype]}\""
        variant.outputs.all {
//            ext.output_apk_folder=variant.getPackageApplicationProvider().get().outputs.files[2].relativize(this.project.rootDir.toPath())
            ext.output_apk_folder = variant.getPackageApplicationProvider().get().outputs.files[2]
            println "output_apk_folder :  " + ext.output_apk_folder
            outputFileName = "${flavorName}${env}_demo_v${versionName}.apk"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    x86Implementation project(':flavor_x86')
}

task showCurrentVersion {
    group "version Tasks"
    this.project.ext.currentVersion("")
}

task increaseVersion {
    group "version Tasks"
    doLast {
        this.project.ext.increaseVersion("")
    }
}

task decreaseVersion {
    group "version Tasks"
    doLast {
        this.project.ext.decreaseVersion("")
    }
}